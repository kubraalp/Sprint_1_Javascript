/* GÃ¶rev 1: Kalanlar ToplamÄ±
100%
Marangoz eniÅŸten bÃ¼yÃ¼k bir proje aldÄ±. Daha Ã¶nceki iÅŸlerde elinde kalan parÃ§alarÄ± kullanarak Ã§evreyi korumak istiyor. YapmasÄ± gereken Ã¼rÃ¼nler 3cm geniÅŸliÄŸinde Ã§ubuklar. Elinde de deÄŸiÅŸik Ã¶lÃ§Ã¼lerde -boyu yeterli- tahta parÃ§alarÄ± var. Elindeki parÃ§alarÄ±n Ã¶lÃ§Ã¼sÃ¼nÃ¼ verip, kullanÄ±lamayacak parÃ§alarÄ±n toplam Ã¶lÃ§Ã¼sÃ¼nÃ¼ Ã¶ÄŸrenmek istiyor.

Ona yardÄ±mcÄ± olmak iÃ§in:

AdÄ± totalRemainder olan bir fonksiyon yazalÄ±m.
Bu fonksiyon sayÄ±lardan oluÅŸan bir arrayi parametre olarak alsÄ±n.
Bu array'deki her sayÄ±nÄ±n 3'e bÃ¶lÃ¼mÃ¼nden kalanlarÄ±n toplamÄ±nÄ± dÃ¶nsÃ¼n.
Ã–rnek KullanÄ±m:

[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object]
[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object]
Ä°pucu: dÃ¶ngÃ¼ kullanabilirsin.
Ä°pucu: Modulo operatÃ¶rÃ¼ (%) kullanabilirsin. */

function totalRemainder(numbers) {
    let total = 0;
    for (let i = 0; i < numbers.length; i++) {
      if (numbers[i] % 3 !== 0) {
        total += numbers[i] % 3;
      }
    }
    return total;
  }
  console.log(totalRemainder([1, 5, 11, 145, 51, 2]));
  console.log(totalRemainder([2, 9, 13, 14]));
  /* Bu satÄ±rdan sonraki satÄ±rlarÄ± silmeyin! */
  module.exports = totalRemainder;


  /* GÃ¶rev 2: Ortalamadan BÃ¼yÃ¼kler
100%
Mezun olduÄŸun okulda baÅŸarÄ±yÄ± Ã¶lÃ§mek iÃ§in ders notlarÄ± Ã¼zerinden bir araÅŸtÄ±rma yapmak istiyorlar. Bir sÄ±nÄ±ftaki Ã¶ÄŸrencilerden kaÃ§Ä± sÄ±nÄ±f ortalamasÄ±nÄ±n Ã¼zerinde? Bunun iÃ§in senden yardÄ±m istediler.

AdÄ± aboveAverage olan bir fonksiyon yazalÄ±m.
Bu fonksiyon sayÄ±lardan oluÅŸan bir arrayi parametre olarak alsÄ±n.
Bu fonksiyon bu arraydeki sayÄ±larÄ±n ortalamasÄ±nÄ± alÄ±p, ortalamadan bÃ¼yÃ¼k olanlarÄ±n sayÄ±sÄ±nÄ± dÃ¶nsÃ¼n.

Ã–rnek KullanÄ±mlar:

aboveAverage([1,2,3,4,5,6,7,8,9]);

// iÅŸlemi 4 dÃ¶nmeli.
aboveAverage([1,12,13,14,15,100]);

// iÅŸlemi 1 dÃ¶nmeli.
aboveAverage([1,13,14,15]);

// iÅŸlemi 3 dÃ¶nmeli.
Ä°pucu: 2 kere dÃ¶ngÃ¼ kullanabilirsin.
Ä°pucu: Ã–nce ortalamayÄ± hesaplayabilirsin. (Ortalama = Toplam / Adet) */

function aboveAverage(notlar) {
    toplam = 0;
    for (let i = 0; i < notlar.length; i++) {
      toplam += notlar[i];
    }
    let ortalamadanBuyukler = 0;
    let ortalama = toplam / notlar.length;
    for (let k = 0; k < notlar.length; k++) {
      if (notlar[k] > ortalama) {
        ortalamadanBuyukler++;
      }
    }
    return ortalamadanBuyukler;
  }
  console.log(aboveAverage([1, 2, 3, 4, 5, 6, 7, 8, 9]));
  console.log(aboveAverage([1, 12, 13, 14, 15, 100]));
  console.log(aboveAverage([1, 13, 14, 15]));
  
  /* Bu satÄ±rdan sonraki satÄ±rlarÄ± silmeyin! */
  module.exports = aboveAverage;

  /* GÃ¶rev 3: Harf Tekrar SÄ±klÄ±ÄŸÄ±
100%
AynÄ± okulda okuduÄŸun giriÅŸimci bir arkadaÅŸÄ±n Ã¶zel bir klavye tasarlamak istiyor. En Ã§ok kullanÄ±lan harfleri en hÄ±zlÄ± parmaklarÄ±n olduÄŸu yere koyarak yazma hÄ±zÄ±nÄ± ve 10 parmak Ã¶ÄŸrenmeyi kolaylaÅŸtÄ±rmak istiyor. Bunun iÃ§in Ã¶n araÅŸtÄ±rma aÅŸamasÄ±nda ve senden yardÄ±m istiyor.

BazÄ± harfleri, gÃ¼nlÃ¼k hayatÄ±mÄ±zdaki metinlerde kontrol ederek hangi harfi daha Ã§ok kullandÄ±ÄŸÄ±mÄ±zÄ± anlamaya Ã§alÄ±ÅŸÄ±yor.

Ona yardÄ±mcÄ± olmak iÃ§in:

AdÄ± 'AdÄ± countOfChar olan bir fonksiyon yazalÄ±m.
Bu fonksiyon 1. parametre olarak bir metin, 2. parametre olarak metinde araÅŸtÄ±racaÄŸÄ±mÄ±z karakteri alsÄ±n.
Bu karakterin metinde kaÃ§ kere geÃ§tiÄŸini hesaplayÄ±p dÃ¶nsÃ¼n.
Ã–rnek KullanÄ±m:

countOfChar("Sprint 1 4. gÃ¼n konusu diziler", "e")

// sonucu 1 dÃ¶nmeli.
countOfChar("Sprint 1 4. gÃ¼n konusu diziler", "i")

// sonucu 3 dÃ¶nmeli

Ä°pucu: DÃ¶ngÃ¼ kullanabilirsin.
Ä°pucu: BÃ¼yÃ¼k kÃ¼Ã§Ã¼k harfe dikkat.
Ä°pucu: Stringlerdeki karakterlere index'inden ulaÅŸabilirsin veya .split() ile karakterleri bir array'de toplayabilirsin. */

function countOfChar(metin, karakter) {
    let tekrar = 0;
  
    for (let i = 0; i < metin.length; i++) {
      if (metin.charAt(i).toLowerCase() == karakter.toLowerCase()) {
        tekrar++;
      }
    }
    return tekrar;
  }
  
  /* Bu satÄ±rdan sonraki satÄ±rlarÄ± silmeyin! */
  module.exports = countOfChar;

  
  /* GÃ¶rev 4: CÃ¼mledeki En Uzun Kelime
100%
Edebiyat okuyan kuzenin tezi iÃ§in yeni bir bilgiye ihtiyaÃ§ duydu. TÃ¼rkÃ§edeki uzun kelimeler... Bir edebi metindeki her cÃ¼mlenin en uzun kelimesini bulmak istiyor.

AdÄ± getLongestWord olan bir fonksiyon yazalÄ±m.
Bu fonksiyon bir cÃ¼mleyi parametre olarak alsÄ±n.
Bu cÃ¼mledeki en uzun kelimeyi geri dÃ¶nsÃ¼n.
Ã–rnek KullanÄ±m:

getLongestWord("Ã–TV matrah artÄ±rÄ±mÄ± ile arabalar ucuzlayacak");

// "ucuzlayacak" dÃ¶nmeli
getLongestWord("Split metodu ile bir metni kelimelerden oluÅŸan bir array'e dÃ¶nÃ¼ÅŸtÃ¼rebilirsin");

//  "dÃ¶nÃ¼ÅŸtÃ¼rebilirsin" dÃ¶nmeli
Ä°pucu: Ã–rneklerde bir ipucu gizli. ğŸ˜‰
Ä°pucu: .length Ã¶zelliÄŸini kullanabilirsin.
Ä°pucu: maxUzunluk ve enUzunKelime diye deÄŸiÅŸken oluÅŸturabilirsin.
Ä°pucu: Her kelimede dÃ¶ngÃ¼ yapÄ±p, maxUzunluk'tan bÃ¼yÃ¼k mÃ¼ kontrolÃ¼ yapabilirsin.
Ä°pucu: BÃ¼yÃ¼kse maxUzunluk ve enUzunKelime'yi gÃ¼ncelleyebilirsin. */

function getLongestWord(metin) {
    const kelimeler = metin.split(' ');
  
    let maxUzunluk = 0;
    let enUzunKelime = '';
    for (let i = 0; i < kelimeler.length; i++) {
      if (kelimeler[i].length > maxUzunluk) {
        maxUzunluk = kelimeler[i].length;
        enUzunKelime = kelimeler[i];
      }
    }
    return enUzunKelime;
  }
  
  /* Bu satÄ±rdan sonraki satÄ±rlarÄ± silmeyin! */
  module.exports = getLongestWord;

  /* GÃ¼n Projesi: YardÄ±m TutarÄ± Hesaplama
100%
BÃ¼yÃ¼k bir televizyon kanalÄ±nda developer olarak Ã§alÄ±ÅŸmaya baÅŸladÄ±n. Bu kanalda canlÄ± yayÄ±nda bir yardÄ±m kampanyasÄ± dÃ¼zenleniyor. Telefonla arayan yardÄ±msever insanlar belli tutarlarda yardÄ±m yapÄ±yorlar.

Ahmet isimli bir kiÅŸi yardÄ±m yapanlarÄ±n isimlerinde kendi adÄ±nda bulunan harflerden kaÃ§ tane geÃ§iyor ise 1000 katÄ± TL'yi baÄŸÄ±ÅŸlayacaÄŸÄ±nÄ± aÃ§Ä±kladÄ±. Kanal yÃ¶netimi senden baÄŸÄ±ÅŸlar geldikÃ§e Ahmet isimli kiÅŸinin sÃ¶z verdiÄŸi yardÄ±m tutarÄ±nÄ± hesaplamanÄ± istiyorlar.

Bunu hesaplayacak fonksiyonun adÄ± tutarHesapla olsun.
Bu fonksiyon yardÄ±m yapanlarÄ±n isimlerini iÃ§erin bir array'i parametre olarak alsÄ±n.
Gelen listedeki isimlerde 'Ahmet' ismindeki harflerden toplam kaÃ§ tane olduÄŸunu hesaplayÄ±p, 1000 katÄ±nÄ± geri dÃ¶nsÃ¼n.

Ã–rnek KullanÄ±m:

const yardimYapanlar = [
	"Leyla Mert",
	"Fevzi Kaya",
	"Aysel HataylÄ±",
	"Furkan MenekÅŸe",
	"Zeliha AydÄ±n"
];

tutarHesapla(yardimYapanlar);
a harfi 9 kere,
h karfi 2 kere,
m harfi 2 kere,
e harfi 8 kere,
t harfi 2 kere = toplam 23 kere olduÄŸundan, 
23.000 TL dÃ¶nmeli. */

function tutarHesapla(isimler) {
    let tekrar = 0;
  
    const karakterler = ['a', 'h', 'm', 'e', 't'];
    for (let i = 0; i < isimler.length; i++) {
      let isim = isimler[i].toLowerCase();
      for (let h = 0; h < karakterler.length; h++) {
        for (let k = 0; k < isim.length; k++) {
          if (isim.charAt(k) === karakterler[h]) {
            tekrar++;
          }
        }
      }
    }
    return tekrar * 1000;
  }
  
  /* Bu satÄ±rdan sonraki satÄ±rlarÄ± silmeyin! */
  module.exports = tutarHesapla;